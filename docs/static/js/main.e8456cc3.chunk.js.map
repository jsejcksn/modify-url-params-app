{"version":3,"sources":["util.ts","components/CopyButton.tsx","components/EntryItem.tsx","components/QueryParams.tsx","App.tsx","index.tsx"],"names":["copyToClipboard","data","a","text","includes","String","JSON","stringify","navigator","clipboard","writeText","styles","CopyButton","props","useState","success","setSuccess","timerId","setTimerId","useEffect","clearTimeout","handleClick","wasCopied","window","setTimeout","undefined","css","button","onClick","EntryItem","enabled","entry","key","value","toggle","checked","checkbox","onChange","type","kv","QueryParams","entries","setEntries","allSelected","setAllSelected","isIndeterminate","setIsIndeterminate","checkboxRef","useRef","reduce","count","length","current","indeterminate","checkboxLabel","style","display","map","ref","list","index","toggledEntry","i","App","address","setAddress","url","setUrl","message","setMessage","queryEntries","setQueryEntries","resultAddress","setResultAddress","URL","location","href","searchParams","get","getQueryEntries","enabledEntries","filter","params","URLSearchParams","resultUrl","search","toString","app","section","input","ev","target","placeholder","result","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8456cc3.chunk.js","sourcesContent":["export type Entry = [key: string, value: string];\n\nexport function wait (delayMs: number): Promise<void> {\n  return new Promise<void>(res => setTimeout(res, delayMs));\n}\n\nexport function sortByLowercaseKey (entryA: Entry, entryB: Entry): number {\n  const a = entryA[0].toLowerCase();\n  const b = entryB[0].toLowerCase();\n\n  return a < b ? -1\n    : b < a ? 1\n    : 0;\n}\n\nexport function getQueryEntries (address: string): Entry[] {\n  const entries = [...new URL(address).searchParams.entries()];\n  return entries;\n}\n\nexport function getFragmentEntries (address: string): Entry[] {\n  const entries: Entry[] = [];\n\n  const fragment = new URL(address).hash.slice(1);\n  const pairs = fragment.split('&').map(str => str.split('='));\n\n  for (const pair of pairs) {\n    if (pair.length !== 2) continue;\n    const [key, value] = pair;\n    entries.push([key, decodeURIComponent(value)]);\n  }\n\n  return entries;\n}\n\nexport async function copyToClipboard (data: any): Promise<boolean> {\n  try {\n    const coercibleTypes = ['bigint', 'function', 'string', 'symbol', 'undefined'];\n    const text = coercibleTypes.includes(typeof data)\n      ? String(data)\n      : JSON.stringify(data);\n    await navigator.clipboard.writeText(text);\n    return true;\n  }\n  catch {\n    return false;\n  }\n}\n","/** @jsxImportSource @emotion/react */\n\nimport {ReactElement, useEffect, useState} from 'react';\nimport {css, SerializedStyles} from '@emotion/react';\n\nimport {copyToClipboard} from '../util';\n\nconst styles: Record<string, SerializedStyles> = {};\n\nstyles.button = css`\n  background-color: var(--color-fg);\n  border: 0;\n  border-radius: 100vw;\n  color: var(--color-bg);\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 1rem;\n  text-transform: uppercase;\n  width: 10rem;\n`;\n\nexport type Props = {\n  text: string;\n};\n\nexport function CopyButton (props: Props): ReactElement {\n  const {text} = props;\n  const [success, setSuccess] = useState<boolean | undefined>();\n  const [timerId, setTimerId] = useState(0);\n\n  useEffect(() => () => clearTimeout(timerId), [timerId]);\n\n  const handleClick = async (): Promise<void> => {\n    const wasCopied = await copyToClipboard(text);\n    setSuccess(wasCopied);\n    const revertDelay = 1000 * 1.5;\n    const timerId = window.setTimeout(() => setSuccess(undefined), revertDelay);\n    setTimerId(timerId);\n  };\n\n  return (\n    <button\n      css={styles.button}\n      onClick={handleClick}\n    >{\n      typeof success === 'boolean'\n        ? (success ? 'Copied' : 'Not copied')\n        : 'Copy'\n    }</button>\n  );\n}\n\nexport default CopyButton;\n","/** @jsxImportSource @emotion/react */\n\nimport type {ReactElement} from 'react';\nimport {css, SerializedStyles} from '@emotion/react';\n\nimport type {Entry} from '../util';\n\nconst styles: Record<string, SerializedStyles> = {};\n\nstyles.entry = css`\n  border-radius: 0.25rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5em;\n  padding: 0.5rem;\n  transition: all 150ms;\n\n  &:hover {\n    background-color: var(--color-bg-subtle-2);\n  }\n`;\n\nstyles.kv = css`\n  background-color: var(--color-bg-subtle);\n  border-radius: 0.25rem;\n  font-family: var(--font-mono);\n  padding: 0.1em 0.2em;\n`;\n\nstyles.key = css`\n  ${styles.kv};\n`;\n\nstyles.value = css`\n  ${styles.kv};\n`;\n\nstyles.checkbox = css`\n  cursor: pointer;\n  flex-shrink: 0;\n`;\n\nexport type Props = {\n  enabled: boolean;\n  entry: Entry;\n  toggle: () => void;\n};\n\nexport function EntryItem (props: Props): ReactElement {\n  const {enabled, entry: [key, value], toggle} = props;\n\n  return (\n    <div>\n      <label css={styles.entry}>\n        <input\n          checked={enabled}\n          css={styles.checkbox}\n          onChange={toggle}\n          type=\"checkbox\"\n        /><span css={styles.key}>{key}</span>=<span css={styles.value}>{value}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default EntryItem;\n","/** @jsxImportSource @emotion/react */\n\nimport {\n  Dispatch,\n  ReactElement,\n  SetStateAction,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport {css, SerializedStyles} from '@emotion/react';\n\nimport {Entry} from '../util';\n\nimport {EntryItem} from './EntryItem';\n\nconst styles: Record<string, SerializedStyles> = {};\n\nstyles.checkboxLabel = css`\n  border-radius: 0.25rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5em;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  transition: all 150ms;\n  user-select: none;\n\n  &:hover {\n    background-color: var(--color-bg-subtle-2);\n  }\n`;\n\nstyles.checkbox = css`\n  cursor: pointer;\n  flex-shrink: 0;\n`;\n\nstyles.list = css`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport type ToggledEntry = [enabled: boolean, entry: Entry];\n\nexport type Props = {\n  entries: ToggledEntry[];\n  setEntries: Dispatch<SetStateAction<ToggledEntry[]>>;\n};\n\nexport function QueryParams (props: Props): ReactElement {\n  const {entries, setEntries} = props;\n  const [allSelected, setAllSelected] = useState(true);\n  const [isIndeterminate, setIsIndeterminate] = useState(false);\n  const checkboxRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    const enabledCount = entries.reduce((count, [enabled]) => count + (enabled ? 1 : 0), 0);\n\n    switch (enabledCount) {\n      case 0: {\n        setAllSelected(false);\n        setIsIndeterminate(false);\n        break;\n      }\n      case entries.length: {\n        setAllSelected(true);\n        setIsIndeterminate(false);\n        break;\n      }\n      default: {\n        setAllSelected(true);\n        setIsIndeterminate(true);\n        break;\n      }\n    }\n  }, [entries, setAllSelected, setIsIndeterminate]);\n\n  useEffect(() => {\n    const checkbox = checkboxRef.current;\n    if (!checkbox) return;\n    checkbox.indeterminate = isIndeterminate;\n  }, [isIndeterminate]);\n  \n  const toggleAll = (): void => {\n    if (isIndeterminate || allSelected) {\n      setEntries(entries => entries.map(([, entry]) => [false, entry]));\n      setAllSelected(false);\n    }\n    else {\n      setEntries(entries => entries.map(([, entry]) => [true, entry]));\n      setAllSelected(true);\n    }\n    setIsIndeterminate(false);\n  };\n  \n  return (\n    <div>\n      <label\n        css={styles.checkboxLabel}\n        style={entries.length > 1 ? undefined : {display: 'none'}}\n      >\n        <input\n          checked={allSelected}\n          css={styles.checkbox}\n          onChange={toggleAll}\n          ref={checkboxRef}\n          type=\"checkbox\"\n        /><span>{\n          (isIndeterminate || allSelected)\n            ? 'Disable all'\n            : 'Enable all'\n          // 'All'\n        }</span>\n      </label>\n      <ul css={styles.list}>{\n        entries.map(([enabled, entry], index) => {\n          const toggle = (): void => {\n            setEntries(entries => entries.map((toggledEntry, i) => i === index ? [!enabled, entry] : toggledEntry));\n          };\n\n          return (\n            <li key={`${index}.${entry[0]}`}>\n              <EntryItem {...{enabled, entry, toggle}} />\n            </li>\n          );\n        })\n      }</ul>\n    </div>\n  );\n}\n\nexport default QueryParams;\n","/** @jsxImportSource @emotion/react */\n\nimport {ReactElement, useEffect, useState} from 'react';\nimport {css, SerializedStyles} from '@emotion/react';\n\nimport {getQueryEntries} from './util';\n\nimport {CopyButton} from './components/CopyButton';\nimport {QueryParams, ToggledEntry} from './components/QueryParams';\n\nconst styles: Record<string, SerializedStyles> = {};\n\nstyles.app = css`\n  padding: 2rem 1rem 4rem;\n\n  & a {\n    color: var(--color-accent);\n    text-decoration-style: underline;\n    text-decoration-color: transparent;\n\n    &:hover {\n      text-decoration-color: var(--color-accent);\n    }\n  }\n`;\n\nstyles.section = css`\n  margin: 2rem 0;\n`;\n\nstyles.input = css`\n  background-color: inherit;\n  border: 1px solid var(--color-fg);\n  border-radius: 0.25rem;\n  color: inherit;\n  font-family: var(--font-mono);\n  font-size: 1rem;\n  outline: none;\n  padding: 0.5rem;\n  width: 100%;\n  max-width: 50rem;\n  transition: all 150ms;\n\n  &:hover {\n    background-color: var(--color-bg-subtle-2);\n  }\n\n  &:focus {\n    background-color: var(--color-bg-subtle);\n    border-color: var(--color-accent);\n  }\n`;\n\nstyles.result = css`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport function App (): ReactElement {\n  const [address, setAddress] = useState('');\n  const [url, setUrl] = useState<URL | undefined>();\n  const [message, setMessage] = useState('');\n  const [queryEntries, setQueryEntries] = useState<ToggledEntry[]>([]);\n  const [resultAddress, setResultAddress] = useState(address);\n\n  useEffect(() => {\n    const address = new URL(window.location.href).searchParams.get('url') ?? '';\n    setAddress(address);\n  }, []);\n\n  useEffect(() => {\n    if (!address) {\n      setUrl(undefined);\n      setMessage('Input a URL to get started');\n      return;\n    }\n\n    try {\n      const url = new URL(address);\n      setUrl(url);\n      const entries = getQueryEntries(url.href);\n      setQueryEntries(entries.map<ToggledEntry>(entry => [true, entry]));\n      setMessage(entries.length === 0\n        ? 'No query parameters found in URL'\n        : '');\n    }\n    catch {\n      setUrl(undefined);\n      setMessage('The URL could not be parsed');\n    }\n  }, [address, setMessage, setQueryEntries, setUrl]);\n\n  useEffect(() => {\n    if (!url) {\n      setResultAddress('');\n      return;\n    }\n\n    const enabledEntries = queryEntries\n      .filter(([enabled]) => enabled)\n      .map(([, entry]) => entry);\n\n    const params = new URLSearchParams(enabledEntries);\n    const resultUrl = new URL(url.href);\n    resultUrl.search = params.toString();\n    setResultAddress(resultUrl.href);\n  }, [queryEntries, setResultAddress, url]);\n\n  return (\n    <div css={styles.app}>\n      <header css={styles.section}>\n        <h1>Modify URL Parameters</h1>\n      </header>\n      <div css={styles.section}>\n        <input\n          css={styles.input}\n          onChange={ev => setAddress(ev.target.value)}\n          placeholder=\"https://hostna.me/path?param1=value1&param2=value2\"\n          type=\"url\"\n          value={address}\n        />\n      </div>\n      <div css={styles.section}>\n        {\n          message\n            ? (<div>{message}</div>)\n            : (<QueryParams\n                entries={queryEntries}\n                setEntries={setQueryEntries}\n              />)\n        }\n      </div>\n      {\n        resultAddress\n          ? (\n            <div css={[styles.section, styles.result]}>\n              <a href={resultAddress}>{resultAddress}</a>\n              <CopyButton text={resultAddress} />\n            </div>\n          )\n          : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import {StrictMode} from 'react';\nimport {render} from 'react-dom';\n// import reportWebVitals from './reportWebVitals';\n\nimport 'sanitize.css';\nimport './styles.css';\n\nimport {App} from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('react-root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}